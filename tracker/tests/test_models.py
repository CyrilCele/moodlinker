import pytest
from django.utils import timezone
from tracker.models import (
    User,
    Address,
    UserProfile,
    Notification,
    Habit,
    HabitReminder,
    MoodEntry,
    HabitCompletion,
)


@pytest.mark.django_db
def test_user_token_autogenerated():
    user = User.objects.create_user(username="testuser", password="pass123")
    assert user.calendar_token is not None
    assert len(user.calendar_token) == 64


@pytest.mark.django_db
def test_address_str():
    address = Address.objects.create(
        street_address="123 Main St",
        city="Cape Town",
        country="South Africa",
        postal_code="8001",
    )
    assert str(address) == "123 Main St, Cape Town, South Africa"


@pytest.mark.django_db
def test_userprofile_timezone_resolution():
    user = User.objects.create_user(username="tester", password="pass123")

    UserProfile.objects.filter(user=user).delete()

    profile = UserProfile.objects.create(
        user=user, timezone="Africa/Johannesburg"
    )

    tz = profile.tz()
    assert tz.key == "Africa/Johannesburg"

    # fallback to UTC for invalid timezone
    profile.timezone = "Not_A_Zone"
    assert profile.tz().key == "UTC"


@pytest.mark.django_db
def test_userprofile_str():
    user = User.objects.create_user(username="notifyuser", password="pass123")
    profile, _ = UserProfile.objects.get_or_create(user=user)
    assert str(profile) == f"{user.username}'s Profile."


@pytest.mark.django_db
def test_notification_creation_and_ordering():
    user = User.objects.create_user(username="notifyuser", password="pass123")
    Notification.objects.create(user=user, message="First")
    Notification.objects.create(user=user, message="Second")
    notifications = list(Notification.objects.filter(user=user))
    # Ltest created comes first due to ordering
    assert notifications[0].message == "Second"
    assert "Notification(" in str(notifications[0])


@pytest.mark.django_db
def test_habit_creation_and_str():
    user = User.objects.create_user(username="habituser", password="pass123")
    habit = Habit.objects.create(
        user=user, habit="Meditate", periodicity="daily", description="Test habit"
    )
    assert str(habit) == "Habit: Meditate for habituser"


@pytest.mark.django_db
def test_habit_uniqueness_constraint():
    user = User.objects.create_user(username="habitdup", password="pass123")
    Habit.objects.create(user=user, habit="Read", periodicity="daily")
    with pytest.raises(Exception):
        Habit.objects.create(user=user, habit="Read", periodicity="daily")


@pytest.mark.django_db
def test_habit_user_habits_limit():
    user = User.objects.create_user(username="habitlimit", password="pass123")
    for i in range(5):
        Habit.objects.create(user=user, habit=f"Habit{i}", periodicity="daily")
    assert Habit.user_habits_limit(user) is False


@pytest.mark.django_db
def test_habitreminder_uniqueness_and_str():
    user = User.objects.create_user(
        username="reminderuser", password="pass123")
    habit = Habit.objects.create(user=user, habit="Jog", periodicity="daily")
    now = timezone.now()
    reminder = HabitReminder.objects.create(
        user=user, habit=habit, next_trigger_utc=now
    )
    assert str(reminder).startswith("Reminder(reminderuser, Jog)")
    with pytest.raises(Exception):
        HabitReminder.objects.create(
            user=user, habit=habit, next_trigger_utc=now)


@pytest.mark.django_db
def test_moodentry_creation_and_uniqueness():
    user = User.objects.create_user(username="mooduser", password="pass123")
    entry = MoodEntry.objects.create(
        user=user, score=3, reflection="Feeling ok")
    assert str(entry).startswith("mooduser - Mood: 3")
    with pytest.raises(Exception):
        # same day, same user -> unique_together violation
        MoodEntry.objects.create(user=user, score=4, reflection="Duplicate")


@pytest.mark.django_db
def test_habitcompletion_uniqueness_and_str():
    user = User.objects.create_user(username="compuser", password="pass123")
    habit = Habit.objects.create(
        user=user, habit="Stretch", periodicity="daily")
    completion = HabitCompletion.objects.create(
        user=user, habit=habit, completed=True)
    assert completion.completed is True
    with pytest.raises(Exception):
        HabitCompletion.objects.create(user=user, habit=habit, completed=False)
